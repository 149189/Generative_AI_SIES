# -*- coding: utf-8 -*-
"""Generative_AI_SIES.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mlMQ8acE4TpAvP_OV8mhFIGGD3Xn058y
"""

import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Embedding, LSTM, Dense

# Sample text data
text = "Your input text goes here. You can use a large dataset for better results."

# Create a mapping from characters to integers
chars = sorted(list(set(text)))
char_to_int = {char: i for i, char in enumerate(chars)}
int_to_char = {i: char for i, char in enumerate(chars)}

# Prepare the dataset
max_len = 40  # Maximum length of input sequence
step = 3  # Step to create overlapping sequences

input_sequences = []
output_sequences = []

for i in range(0, len(text) - max_len, step):
    input_seq = text[i:i + max_len]
    output_seq = text[i + max_len]
    input_sequences.append([char_to_int[char] for char in input_seq])
    output_sequences.append(char_to_int[output_seq])

# Convert sequences to numpy arrays
X = np.array(input_sequences)
y = np.array(output_sequences)

# Define the model
model = Sequential()
model.add(Embedding(len(chars), 50, input_length=max_len))
model.add(LSTM(100))
model.add(Dense(len(chars), activation='softmax'))

model.compile(loss='sparse_categorical_crossentropy', optimizer='adam')

# Train the model
model.fit(X, y, epochs=50, batch_size=32)

# Function to generate text
def generate_text(seed_text, model, max_len, num_chars):
    generated_text = seed_text
    for _ in range(num_chars):
        input_seq = [char_to_int[char] for char in seed_text[-max_len:]]
        input_seq = np.array(input_seq).reshape(1, max_len)
        predicted_char_index = np.argmax(model.predict(input_seq, verbose=0))
        predicted_char = int_to_char[predicted_char_index]
        generated_text += predicted_char
        seed_text += predicted_char
    return generated_text

# Generate text
seed_text = "Your input text goes here. "
generated_text = generate_text(seed_text, model, max_len, num_chars=200)
print(generated_text)

